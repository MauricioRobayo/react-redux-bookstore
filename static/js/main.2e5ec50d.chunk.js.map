{"version":3,"sources":["components/Book.js","redux/actions/index.js","config/index.js","components/CategoryFilter.js","components/Header.js","containers/BooksList.js","containers/BooksForm.js","components/App.js","redux/reducers/book.js","redux/reducers/filter.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["Book","book","handleRemoveBook","className","src","thumbnail","alt","category","title","id","type","onClick","actionTypes","bookCategories","Filter","handleFilterChange","htmlFor","onChange","event","target","value","categories","map","key","Header","children","BooksList","removeBook","props","filter","changeFilter","getRandomBooks","this","books","CategoryFilter","length","Component","mapDispatchToProps","fetchCategory","a","searchparams","URLSearchParams","q","maxResults","fields","fetch","response","json","dispatch","Promise","all","then","booksByCategory","index","items","volumeInfo","imageLinks","smallThumbnail","sort","Math","random","slice","floor","replace","flat","connect","BooksForm","handleChange","name","setState","handleSubmit","preventDefault","state","createBook","uniqid","reset","renderCategories","disabled","hidden","onSubmit","placeholder","App","action","currBook","reducers","combineReducers","middleware","applyMiddleware","thunk","logger","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2e5ec50d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Book = ({ book, handleRemoveBook }) => (\n  <div className=\"Book\">\n    <img src={book.thumbnail} alt=\"\" />\n    <div className=\"Book-category\">{book.category}</div>\n    <h2 className=\"Book-title\">{book.title}</h2>\n    <div className=\"Book-id\">{book.id}</div>\n    <button\n      className=\"Book-remove\"\n      type=\"button\"\n      onClick={() => handleRemoveBook(book)}\n    >\n      Remove\n    </button>\n  </div>\n);\n\nBook.propTypes = {\n  book: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    category: PropTypes.string,\n    thumbnail: PropTypes.string,\n  }).isRequired,\n  handleRemoveBook: PropTypes.func.isRequired,\n};\n\nexport default Book;\n","const actionTypes = {\n  CREATE_BOOK: 'CREATE_BOOK',\n  REMOVE_BOOK: 'REMOVE_BOOK',\n  CHANGE_FILTER: 'CHANGE_FILTER',\n  LOAD_BOOKS: 'LOAD_BOOKS',\n};\n\nconst createBook = (book) => ({\n  type: actionTypes.CREATE_BOOK,\n  book,\n});\n\nconst removeBook = (book) => ({\n  type: actionTypes.REMOVE_BOOK,\n  book,\n});\n\nconst changeFilter = (filter) => ({\n  type: actionTypes.CHANGE_FILTER,\n  filter,\n});\n\nconst getRandomBooks = (categories) => {\n  const fetchCategory = async (category) => {\n    const searchparams = new URLSearchParams({\n      q: `subject:${category}`,\n      maxResults: 40,\n      fields: 'items(id,volumeInfo(title,imageLinks/smallThumbnail))',\n    });\n    const response = await fetch(\n      `https://www.googleapis.com/books/v1/volumes?${searchparams}`\n    );\n    return response.json();\n  };\n  return (dispatch) => {\n    Promise.all(categories.map(fetchCategory)).then((booksByCategory) => {\n      const books = booksByCategory\n        .map(({ items }, index) =>\n          items\n            .filter(\n              ({ volumeInfo: { imageLinks: { smallThumbnail = '' } = {} } }) =>\n                smallThumbnail !== ''\n            )\n            .sort(() => 0.5 - Math.random())\n            .slice(0, Math.floor(Math.random() * 3 + 1))\n            .map(\n              ({\n                id,\n                volumeInfo: {\n                  title,\n                  imageLinks: { smallThumbnail },\n                },\n              }) => ({\n                id,\n                title,\n                thumbnail: smallThumbnail.replace(/^http:/, 'https:'),\n                category: categories[index],\n              })\n            )\n        )\n        .flat();\n      dispatch({ type: actionTypes.LOAD_BOOKS, books });\n    });\n  };\n};\n\nexport { createBook, removeBook, changeFilter, getRandomBooks, actionTypes };\n","const bookCategories = [\n  'Action',\n  'Biography',\n  'History',\n  'Horror',\n  'Kids',\n  'Learning',\n  'Science Fiction',\n];\n\nexport default bookCategories;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport categories from '../config';\n\nconst Filter = ({ handleFilterChange }) => (\n  <label htmlFor=\"filter\">\n    Category\n    <select\n      id=\"filter\"\n      onChange={(event) => handleFilterChange(event.target.value)}\n    >\n      {['All', ...categories].map((category) => (\n        <option key={category} value={category}>\n          {category}\n        </option>\n      ))}\n    </select>\n  </label>\n);\n\nFilter.propTypes = {\n  handleFilterChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = ({ children }) => (\n  <header>\n    <nav>\n      <h1>Bookstore CMS</h1>\n      {children}\n    </nav>\n  </header>\n);\n\nHeader.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default Header;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Book from '../components/Book';\nimport { removeBook, getRandomBooks, changeFilter } from '../redux/actions';\nimport CategoryFilter from '../components/CategoryFilter';\nimport Header from '../components/Header';\nimport bookCategories from '../config';\n\nclass BooksList extends Component {\n  componentDidMount() {\n    const { getRandomBooks } = this.props;\n    getRandomBooks(bookCategories);\n  }\n\n  handleRemoveBook = (book) => {\n    const { removeBook } = this.props;\n    removeBook(book);\n  };\n\n  handleFilterChange = (filter) => {\n    const { changeFilter } = this.props;\n    changeFilter(filter);\n  };\n\n  render() {\n    const { books, filter } = this.props;\n    return (\n      <>\n        <Header>\n          <CategoryFilter\n            filter={filter}\n            handleFilterChange={this.handleFilterChange}\n          />\n        </Header>\n        <div className=\"BookList\">\n          {books.length === 0 ? (\n            <div>Loading...</div>\n          ) : (\n            books\n              .filter((book) => filter === book.category || filter === 'All')\n              .map((book) => (\n                <Book\n                  key={book.id}\n                  book={book}\n                  handleRemoveBook={this.handleRemoveBook}\n                />\n              ))\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nBooksList.propTypes = {\n  books: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      title: PropTypes.string,\n      category: PropTypes.string,\n    })\n  ).isRequired,\n  filter: PropTypes.string.isRequired,\n  removeBook: PropTypes.func.isRequired,\n  getRandomBooks: PropTypes.func.isRequired,\n  changeFilter: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({ books, filter }) => ({\n  books,\n  filter,\n});\n\nconst mapDispatchToProps = {\n  removeBook,\n  changeFilter,\n  getRandomBooks,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BooksList);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport uniqid from 'uniqid';\nimport { connect } from 'react-redux';\nimport { createBook } from '../redux/actions';\nimport bookCategories from '../config';\n\nclass BooksForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '',\n      category: 'Category',\n    };\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { title, category } = this.state;\n    const { createBook } = this.props;\n    createBook({\n      id: uniqid(),\n      title,\n      category,\n    });\n    this.setState({\n      title: '',\n      category: 'Categories',\n    });\n    event.target.reset();\n  };\n\n  renderCategories = () =>\n    ['Category', ...bookCategories].map((category) => (\n      <option\n        disabled={category === 'Category'}\n        hidden={category === 'Category'}\n        key={category}\n        value={category}\n      >\n        {category}\n      </option>\n    ));\n\n  render() {\n    const { title, category } = this.state;\n    return (\n      <footer>\n        <form onSubmit={this.handleSubmit}>\n          <h4>Add new book</h4>\n          <div>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              placeholder=\"Book title\"\n              value={title}\n              onChange={this.handleChange}\n            />\n            <select\n              name=\"category\"\n              id=\"category\"\n              value={category}\n              onChange={this.handleChange}\n              className={category === 'Category' ? 'inactive' : ''}\n            >\n              {this.renderCategories()}\n            </select>\n            <button type=\"submit\" value=\"\">\n              Add book\n            </button>\n          </div>\n        </form>\n      </footer>\n    );\n  }\n}\n\nBooksForm.propTypes = {\n  createBook: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = {\n  createBook,\n};\n\nexport default connect(null, mapDispatchToProps)(BooksForm);\n","import React from 'react';\nimport BooksList from '../containers/BooksList';\nimport BooksForm from '../containers/BooksForm';\n\nconst App = () => (\n  <div className=\"App\">\n    <BooksList />\n    <BooksForm />\n  </div>\n);\n\nexport default App;\n","import { actionTypes } from '../actions';\n\nconst books = (state = [], action) => {\n  switch (action.type) {\n    case actionTypes.CREATE_BOOK:\n      return [...state, action.book];\n    case actionTypes.REMOVE_BOOK:\n      return state.filter((currBook) => currBook.id !== action.book.id);\n    case actionTypes.LOAD_BOOKS:\n      return action.books;\n    default:\n      return state;\n  }\n};\n\nexport default books;\n","import { actionTypes } from '../actions';\n\nconst filter = (state = 'All', { type, filter }) => {\n  switch (type) {\n    case actionTypes.CHANGE_FILTER:\n      return filter;\n    default:\n      return state;\n  }\n};\n\nexport default filter;\n","import { combineReducers } from 'redux';\nimport books from './book';\nimport filter from './filter';\n\nconst reducers = combineReducers({\n  books,\n  filter,\n});\n\nexport default reducers;\n","import logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\nimport reducers from './reducers';\n\nconst initialState = {\n  books: [],\n  filter: 'All',\n};\n\nconst middleware = applyMiddleware(thunk, logger);\n\nconst store = createStore(reducers, initialState, middleware);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport store from './redux/store';\nimport './index.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}