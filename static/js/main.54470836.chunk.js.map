{"version":3,"sources":["components/Book.js","api/googleBooksAPI.js","redux/actions/index.js","config/index.js","containers/BooksList.js","containers/BooksForm.js","components/CategoryFilter.js","components/Header.js","containers/App.js","redux/reducers/book.js","redux/reducers/filter.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["Book","book","handleRemoveBook","className","src","thumbnail","alt","category","title","id","type","onClick","fetchBooks","searchparams","a","fetch","response","ok","Error","statusText","json","fetchBooksByCategory","searchParams","URLSearchParams","q","maxResults","fields","actionTypes","bookCategories","BooksList","removeBook","props","getRandomBooks","this","books","filter","length","reverse","map","key","Component","mapDispatchToProps","categories","hasThumbnail","Boolean","volumeInfo","imageLinks","smallThumbnail","dispatch","Promise","all","then","booksByCategory","index","items","randomSampleSize","Math","floor","random","array","size","i","j","slice","sample","replace","generateBook","flat","connect","BooksForm","debounce","func","delay","timeout","args","clearTimeout","setTimeout","apply","autocomplete","value","searchBooksByTitle","setState","suggestions","item","handleOnKeyUp","event","target","debouncedAutocomplete","handleOnChange","name","handleSubmit","preventDefault","state","createBook","uniqid","reset","renderCategories","disabled","hidden","onSubmit","list","placeholder","onChange","onKeyUp","aria-label","Filter","handleFilterChange","htmlFor","Header","children","App","changeFilter","CategoryFilter","React","action","currBook","reducers","combineReducers","middleware","applyMiddleware","thunk","logger","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.54470836.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Book = ({ book, handleRemoveBook }) => (\n  <div className=\"Book\">\n    <img src={book.thumbnail} alt=\"\" />\n    <div className=\"Book-category\">{book.category}</div>\n    <h2 className=\"Book-title\">{book.title}</h2>\n    <div className=\"Book-id\">{book.id}</div>\n    <button\n      className=\"Book-remove\"\n      type=\"button\"\n      onClick={() => handleRemoveBook(book)}\n    >\n      Remove\n    </button>\n  </div>\n);\n\nBook.propTypes = {\n  book: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    category: PropTypes.string,\n    thumbnail: PropTypes.string,\n  }).isRequired,\n  handleRemoveBook: PropTypes.func.isRequired,\n};\n\nexport default Book;\n","const fetchBooks = async (searchparams) => {\n  const response = await fetch(\n    `https://www.googleapis.com/books/v1/volumes?${searchparams}`\n  );\n  if (!response.ok) {\n    throw new Error(`Something went wrong ${response.statusText}`);\n  }\n  return response.json();\n};\n\nconst fetchBooksByCategory = (category) => {\n  const searchParams = new URLSearchParams({\n    q: `subject:${category}`,\n    maxResults: 40,\n    fields: 'items(id,volumeInfo(title,imageLinks/smallThumbnail))',\n  });\n  return fetchBooks(searchParams);\n};\n\nconst searchBooksByTitle = (title) => {\n  const searchParams = new URLSearchParams({\n    q: `intitle:${title}`,\n    fields: 'items(id,volumeInfo/title)',\n  });\n  return fetchBooks(searchParams);\n};\n\nexport { fetchBooksByCategory, searchBooksByTitle };\n","import { fetchBooksByCategory } from '../../api/googleBooksAPI';\n\nconst actionTypes = {\n  CREATE_BOOK: 'CREATE_BOOK',\n  REMOVE_BOOK: 'REMOVE_BOOK',\n  CHANGE_FILTER: 'CHANGE_FILTER',\n  LOAD_BOOKS: 'LOAD_BOOKS',\n};\n\nconst createBook = (book) => ({\n  type: actionTypes.CREATE_BOOK,\n  book,\n});\n\nconst removeBook = (book) => ({\n  type: actionTypes.REMOVE_BOOK,\n  book,\n});\n\nconst changeFilter = (filter) => ({\n  type: actionTypes.CHANGE_FILTER,\n  filter,\n});\n\nconst getRandomBooks = (categories) => {\n  const MAX_BOOKS_PER_CATEGORY = 3;\n\n  function sample(array, size) {\n    for (let i = array.length - 1; i > array.length - 1 - size; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array.slice(-size);\n  }\n\n  function hasThumbnail(book) {\n    return Boolean(book.volumeInfo.imageLinks?.smallThumbnail);\n  }\n\n  function generateBook(\n    {\n      id,\n      volumeInfo: {\n        title,\n        imageLinks: { smallThumbnail },\n      },\n    },\n    category\n  ) {\n    return {\n      id,\n      title,\n      thumbnail: smallThumbnail.replace(/^http:/, 'https:'),\n      category,\n    };\n  }\n\n  return (dispatch) => {\n    Promise.all(categories.map(fetchBooksByCategory)).then(\n      (booksByCategory) => {\n        dispatch({\n          type: actionTypes.LOAD_BOOKS,\n          books: booksByCategory\n            .map(({ items }, index) => {\n              const randomSampleSize = Math.floor(\n                Math.random() * MAX_BOOKS_PER_CATEGORY + 1\n              );\n              const categoryBooks = items\n                .filter(hasThumbnail)\n                .map((book) => generateBook(book, categories[index]));\n              return sample(categoryBooks, randomSampleSize);\n            })\n            .flat(),\n        });\n      }\n    );\n  };\n};\n\nexport { createBook, removeBook, changeFilter, getRandomBooks, actionTypes };\n","const bookCategories = [\n  'Action',\n  'Biography',\n  'History',\n  'Horror',\n  'Kids',\n  'Learning',\n  'Science Fiction',\n];\n\nexport default bookCategories;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Book from '../components/Book';\nimport { removeBook, getRandomBooks } from '../redux/actions';\nimport bookCategories from '../config';\n\nclass BooksList extends Component {\n  componentDidMount() {\n    const { getRandomBooks } = this.props;\n    getRandomBooks(bookCategories);\n  }\n\n  handleRemoveBook = (book) => {\n    const { removeBook } = this.props;\n    removeBook(book);\n  };\n\n  render() {\n    const { books, filter } = this.props;\n    return (\n      <>\n        <div className=\"BookList\">\n          {books.length === 0 ? (\n            <div>Loading...</div>\n          ) : (\n            books\n              .filter((book) => filter === book.category || filter === 'All')\n              .reverse()\n              .map((book) => (\n                <Book\n                  key={book.id}\n                  book={book}\n                  handleRemoveBook={this.handleRemoveBook}\n                />\n              ))\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nBooksList.propTypes = {\n  books: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      title: PropTypes.string,\n      category: PropTypes.string,\n    })\n  ).isRequired,\n  filter: PropTypes.string.isRequired,\n  removeBook: PropTypes.func.isRequired,\n  getRandomBooks: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({ books, filter }) => ({\n  books,\n  filter,\n});\n\nconst mapDispatchToProps = {\n  removeBook,\n  getRandomBooks,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BooksList);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport uniqid from 'uniqid';\nimport { connect } from 'react-redux';\nimport { createBook } from '../redux/actions';\nimport bookCategories from '../config';\nimport { searchBooksByTitle } from '../api/googleBooksAPI';\n\nclass BooksForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '',\n      category: 'Category',\n      suggestions: [],\n    };\n    this.debouncedAutocomplete = this.debounce(this.autocomplete, 250);\n  }\n\n  debounce = (func, delay) => {\n    let timeout = null;\n    return function _(...args) {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        func.apply(this, args);\n      }, delay);\n    };\n  };\n\n  autocomplete = (value) => {\n    searchBooksByTitle(value).then((books) => {\n      this.setState({\n        suggestions: books.items.map((item) => ({\n          id: item.id,\n          title: item.volumeInfo.title,\n        })),\n      });\n    });\n  };\n\n  handleOnKeyUp = (event) => {\n    const { value } = event.target;\n    this.debouncedAutocomplete(value);\n  };\n\n  handleOnChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n      suggestions: [],\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { title, category } = this.state;\n    const { createBook } = this.props;\n    createBook({\n      id: uniqid(),\n      title,\n      category,\n    });\n    this.setState({\n      title: '',\n      category: 'Categories',\n    });\n    event.target.reset();\n  };\n\n  renderCategories = () =>\n    ['Category', ...bookCategories].map((category) => (\n      <option\n        disabled={category === 'Category'}\n        hidden={category === 'Category'}\n        key={category}\n        value={category}\n      >\n        {category}\n      </option>\n    ));\n\n  render() {\n    const { title, category, suggestions } = this.state;\n    return (\n      <div className=\"form\">\n        <form onSubmit={this.handleSubmit}>\n          <h4>Add new book</h4>\n          <div>\n            <input\n              list=\"titles\"\n              type=\"text\"\n              id=\"title\"\n              placeholder=\"Book title\"\n              value={title}\n              onChange={this.handleOnChange}\n              onKeyUp={this.handleOnKeyUp}\n              aria-label=\"title\"\n              name=\"title\"\n            />\n            <datalist id=\"titles\">\n              {suggestions.map(({ id, title }) => (\n                <option aria-label=\"title suggestions\" key={id} value={title} />\n              ))}\n            </datalist>\n            <select\n              name=\"category\"\n              aria-label=\"category\"\n              id=\"category\"\n              value={category}\n              onChange={this.handleOnChange}\n              className={category === 'Category' ? 'inactive' : ''}\n            >\n              {this.renderCategories()}\n            </select>\n            <button type=\"submit\" value=\"\">\n              Add book\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nBooksForm.propTypes = {\n  createBook: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = {\n  createBook,\n};\n\nexport default connect(null, mapDispatchToProps)(BooksForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport categories from '../config';\n\nconst Filter = ({ handleFilterChange }) => (\n  <label htmlFor=\"filter\">\n    Category\n    <select\n      id=\"filter\"\n      onChange={(event) => handleFilterChange(event.target.value)}\n    >\n      {['All', ...categories].map((category) => (\n        <option key={category} value={category}>\n          {category}\n        </option>\n      ))}\n    </select>\n  </label>\n);\n\nFilter.propTypes = {\n  handleFilterChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = ({ children }) => (\n  <header>\n    <nav>\n      <h1>Bookstore CMS</h1>\n      {children}\n    </nav>\n  </header>\n);\n\nHeader.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default Header;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport BooksList from './BooksList';\nimport BooksForm from './BooksForm';\nimport CategoryFilter from '../components/CategoryFilter';\nimport Header from '../components/Header';\nimport { changeFilter } from '../redux/actions';\n\nclass App extends React.Component {\n  handleFilterChange = (filter) => {\n    const { changeFilter } = this.props;\n    changeFilter(filter);\n  };\n\n  render() {\n    const { filter } = this.props;\n    return (\n      <div className=\"App\">\n        <Header>\n          <CategoryFilter\n            filter={filter}\n            handleFilterChange={this.handleFilterChange}\n          />\n        </Header>\n        <BooksForm />\n        <BooksList />\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  filter: PropTypes.string.isRequired,\n  changeFilter: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({ books, filter }) => ({\n  books,\n  filter,\n});\n\nconst mapDispatchToProps = {\n  changeFilter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { actionTypes } from '../actions';\n\nconst books = (state = [], action) => {\n  switch (action.type) {\n    case actionTypes.CREATE_BOOK:\n      return [...state, action.book];\n    case actionTypes.REMOVE_BOOK:\n      return state.filter((currBook) => currBook.id !== action.book.id);\n    case actionTypes.LOAD_BOOKS:\n      return action.books;\n    default:\n      return state;\n  }\n};\n\nexport default books;\n","import { actionTypes } from '../actions';\n\nconst filter = (state = 'All', { type, filter }) => {\n  switch (type) {\n    case actionTypes.CHANGE_FILTER:\n      return filter;\n    default:\n      return state;\n  }\n};\n\nexport default filter;\n","import { combineReducers } from 'redux';\nimport books from './book';\nimport filter from './filter';\n\nconst reducers = combineReducers({\n  books,\n  filter,\n});\n\nexport default reducers;\n","import logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\nimport reducers from './reducers';\n\nconst initialState = {\n  books: [],\n  filter: 'All',\n};\n\nconst middleware = applyMiddleware(thunk, logger);\n\nconst store = createStore(reducers, initialState, middleware);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './containers/App';\nimport store from './redux/store';\nimport './index.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}