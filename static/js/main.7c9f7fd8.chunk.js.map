{"version":3,"sources":["reducers/book.js","reducers/filter.js","reducers/index.js","components/Book.js","config/index.js","components/CategoryFilter.js","components/Header.js","containers/BooksList.js","actions/index.js","containers/BooksForm.js","components/App.js","index.js"],"names":["books","state","type","book","filter","currBook","id","reducers","combineReducers","Book","handleRemoveBook","className","category","title","onClick","bookCategories","Filter","handleFilterChange","htmlFor","onChange","event","target","value","categories","map","key","Header","children","BooksList","removeBook","props","changeFilter","this","CategoryFilter","Component","connect","dispatch","BooksForm","handleChange","name","setState","handleSubmit","preventDefault","createBook","uniqid","reset","renderCategories","disabled","hidden","onSubmit","placeholder","App","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c9f7fd8.chunk.js","sourcesContent":["const books = (state = [], { type, book }) => {\n  switch (type) {\n    case 'CREATE_BOOK':\n      return [...state, book];\n    case 'REMOVE_BOOK':\n      return state.filter((currBook) => currBook.id !== book.id);\n    default:\n      return state;\n  }\n};\n\nexport default books;\n","const filter = (state = 'All', { type, filter }) => {\n  switch (type) {\n    case 'CHANGE_FILTER':\n      return filter;\n    default:\n      return state;\n  }\n};\n\nexport default filter;\n","import { combineReducers } from 'redux';\nimport books from './book';\nimport filter from './filter';\n\nconst reducers = combineReducers({\n  books,\n  filter,\n});\n\nexport default reducers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Book = ({ book, handleRemoveBook }) => (\n  <div className=\"Book\">\n    <div className=\"Book-category\">{book.category}</div>\n    <h2 className=\"Book-title\">{book.title}</h2>\n    <div className=\"Book-id\">{book.id}</div>\n    <button\n      className=\"Book-remove\"\n      type=\"button\"\n      onClick={() => handleRemoveBook(book)}\n    >\n      Remove\n    </button>\n  </div>\n);\n\nBook.propTypes = {\n  book: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    category: PropTypes.string,\n  }).isRequired,\n  handleRemoveBook: PropTypes.func.isRequired,\n};\n\nexport default Book;\n","const bookCategories = [\n  'Action',\n  'Biography',\n  'History',\n  'Horror',\n  'Kids',\n  'Learning',\n  'Sci-Fi',\n];\n\nexport default bookCategories;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport categories from '../config';\n\nconst Filter = ({ handleFilterChange }) => (\n  <label htmlFor=\"filter\">\n    Filter by:\n    <select\n      id=\"filter\"\n      onChange={(event) => handleFilterChange(event.target.value)}\n    >\n      {['All', ...categories].map((category) => (\n        <option key={category} value={category}>\n          {category}\n        </option>\n      ))}\n    </select>\n  </label>\n);\n\nFilter.propTypes = {\n  handleFilterChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = ({ children }) => (\n  <header>\n    <nav>\n      <h1>Bookstore CMS</h1>\n      {children}\n    </nav>\n  </header>\n);\n\nHeader.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default Header;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Book from '../components/Book';\nimport { removeBook, changeFilter } from '../actions';\nimport CategoryFilter from '../components/CategoryFilter';\nimport Header from '../components/Header';\n\nclass BooksList extends Component {\n  handleRemoveBook = (book) => {\n    const { removeBook } = this.props;\n    removeBook(book);\n  };\n\n  handleFilterChange = (filter) => {\n    const { changeFilter } = this.props;\n    changeFilter(filter);\n  };\n\n  render() {\n    const { books, filter } = this.props;\n    return (\n      <>\n        <Header>\n          <CategoryFilter\n            filter={filter}\n            handleFilterChange={this.handleFilterChange}\n          />\n        </Header>\n        <div className=\"BookList\">\n          {books\n            .filter((book) => filter === book.category || filter === 'All')\n            .map((book) => (\n              <Book\n                key={book.id}\n                book={book}\n                handleRemoveBook={this.handleRemoveBook}\n              />\n            ))}\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ books, filter }) => ({\n  books,\n  filter,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  removeBook: (book) => dispatch(removeBook(book)),\n  changeFilter: (filter) => dispatch(changeFilter(filter)),\n});\n\nBooksList.propTypes = {\n  books: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      title: PropTypes.string,\n      category: PropTypes.string,\n    })\n  ).isRequired,\n  filter: PropTypes.string.isRequired,\n  removeBook: PropTypes.func.isRequired,\n  changeFilter: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BooksList);\n","const createBook = (book) => ({\n  type: 'CREATE_BOOK',\n  book,\n});\n\nconst removeBook = (book) => ({\n  type: 'REMOVE_BOOK',\n  book,\n});\n\nconst changeFilter = (filter) => ({\n  type: 'CHANGE_FILTER',\n  filter,\n});\n\nexport { createBook, removeBook, changeFilter };\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport uniqid from 'uniqid';\nimport { connect } from 'react-redux';\nimport { createBook } from '../actions';\nimport bookCategories from '../config';\n\nclass BooksForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '',\n      category: 'Category',\n    };\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { title, category } = this.state;\n    const { createBook } = this.props;\n    createBook({\n      id: uniqid(),\n      title,\n      category,\n    });\n    this.setState({\n      title: '',\n      category: 'Categories',\n    });\n    event.target.reset();\n  };\n\n  renderCategories = () =>\n    ['Category', ...bookCategories].map((category) => (\n      <option\n        disabled={category === 'Category'}\n        hidden={category === 'Category'}\n        key={category}\n        value={category}\n      >\n        {category}\n      </option>\n    ));\n\n  render() {\n    const { title, category } = this.state;\n    return (\n      <footer>\n        <form onSubmit={this.handleSubmit}>\n          <h4>Add new book</h4>\n          <div>\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              placeholder=\"Book title\"\n              value={title}\n              onChange={this.handleChange}\n            />\n            <select\n              name=\"category\"\n              id=\"category\"\n              value={category}\n              onChange={this.handleChange}\n              className={category === 'Category' ? 'inactive' : ''}\n            >\n              {this.renderCategories()}\n            </select>\n            <button type=\"submit\" value=\"\">\n              Add book\n            </button>\n          </div>\n        </form>\n      </footer>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  createBook: (book) => dispatch(createBook(book)),\n});\n\nBooksForm.propTypes = {\n  createBook: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(BooksForm);\n","import React from 'react';\nimport BooksList from '../containers/BooksList';\nimport BooksForm from '../containers/BooksForm';\n\nconst App = () => (\n  <div className=\"App\">\n    <BooksList />\n    <BooksForm />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport uniqid from 'uniqid';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducers from './reducers';\nimport App from './components/App';\nimport './index.scss';\n\nconst books = [\n  {\n    id: uniqid(),\n    title: 'JS: The Good Parts',\n    category: 'Learning',\n  },\n  {\n    id: uniqid(),\n    title: 'Eloquent JS',\n    category: 'Learning',\n  },\n  {\n    id: uniqid(),\n    title: \"You don't know JS\",\n    category: 'History',\n  },\n  {\n    id: uniqid(),\n    title: 'JS Ninja',\n    category: 'Biography',\n  },\n];\n\nconst store = createStore(reducers, { books, filter: 'All' });\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}