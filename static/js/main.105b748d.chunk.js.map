{"version":3,"sources":["components/Book.js","config/index.js","api/googleBooksAPI.js","redux/actions/index.js","containers/BooksList.js","containers/BooksForm.js","components/CategoryFilter.js","components/Header.js","containers/App.js","redux/reducers/books.js","redux/reducers/filter.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["memo","book","handleRemoveBook","className","src","thumbnail","alt","category","title","id","type","onClick","bookCategories","fetchBooks","a","searchParams","endpoint","fetch","response","ok","Error","statusText","json","fetchBooksByCategory","URLSearchParams","q","maxResults","fields","getBookById","actionTypes","setBookStatus","status","BooksList","removeBook","props","getRandomBooks","this","books","data","filter","booksList","length","reverse","map","key","Component","mapDispatchToProps","categories","hasThumbnail","Boolean","volumeInfo","imageLinks","smallThumbnail","dispatch","Promise","all","then","booksByCategory","index","items","randomSampleSize","Math","floor","random","array","size","i","j","slice","sample","replace","generateBook","flat","connect","BooksForm","debounce","func","delay","timeout","args","clearTimeout","setTimeout","apply","autocomplete","value","searchBooksByTitle","bookSuggestions","totalItems","item","setState","suggestionsCache","suggestions","set","trim","handleOnKeyUp","event","state","target","has","get","debouncedAutocomplete","handleOnChange","name","option","document","querySelector","dataset","handleSubmit","preventDefault","persist","createBook","uniqid","reset","renderCategories","Map","onSubmit","list","placeholder","onChange","onKeyUp","aria-label","data-id","Filter","handleFilterChange","htmlFor","Header","children","App","changeFilter","CategoryFilter","React","initialState","action","currBook","reducers","combineReducers","middleware","applyMiddleware","thunk","logger","store","createStore","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.105b748d.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { memo } from 'react';\n\nconst Book = ({ book, handleRemoveBook }) => (\n  <div className=\"Book\">\n    <img src={book.thumbnail} alt=\"\" />\n    <div className=\"Book-category\">{book.category}</div>\n    <h2 className=\"Book-title\">{book.title}</h2>\n    <div className=\"Book-id\">{book.id}</div>\n    <button\n      className=\"Book-remove\"\n      type=\"button\"\n      onClick={() => handleRemoveBook(book)}\n    >\n      Remove\n    </button>\n  </div>\n);\n\nBook.propTypes = {\n  book: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    category: PropTypes.string,\n    thumbnail: PropTypes.string,\n  }).isRequired,\n  handleRemoveBook: PropTypes.func.isRequired,\n};\n\nexport default memo(Book);\n","const bookCategories = [\n  'Action',\n  'Biography',\n  'History',\n  'Horror',\n  'Kids',\n  'Learning',\n  'Science Fiction',\n];\n\nexport default bookCategories;\n","const fetchBooks = async ({ searchParams, endpoint = '' }) => {\n  const response = await fetch(\n    `https://www.googleapis.com/books/v1/volumes/${endpoint}?${searchParams}`\n  );\n  if (!response.ok) {\n    throw new Error(`Something went wrong ${response.statusText}`);\n  }\n  return response.json();\n};\n\nconst fetchBooksByCategory = (category) => {\n  const searchParams = new URLSearchParams({\n    q: `subject:${category}`,\n    maxResults: 40,\n    fields: 'items(id,volumeInfo(title,imageLinks/smallThumbnail))',\n  });\n  return fetchBooks({ searchParams });\n};\n\nconst searchBooksByTitle = (title) => {\n  const searchParams = new URLSearchParams({\n    q: `intitle:${title}`,\n    fields: 'totalItems,items(id,volumeInfo/title)',\n  });\n  return fetchBooks({ searchParams });\n};\n\nconst getBookById = (id) => {\n  const searchParams = new URLSearchParams({\n    fields: 'id,volumeInfo(title,imageLinks/smallThumbnail)',\n  });\n  return fetchBooks({ endpoint: `${id}`, searchParams });\n};\n\nexport { fetchBooksByCategory, searchBooksByTitle, getBookById };\n","import { fetchBooksByCategory } from '../../api/googleBooksAPI';\n\nconst actionTypes = {\n  CREATE_BOOK: 'CREATE_BOOK',\n  REMOVE_BOOK: 'REMOVE_BOOK',\n  CHANGE_FILTER: 'CHANGE_FILTER',\n  LOAD_BOOKS: 'LOAD_BOOKS',\n  SET_BOOKS_STATUS: 'SET_BOOKS_STATUS',\n};\n\nconst createBook = (book) => ({\n  type: actionTypes.CREATE_BOOK,\n  book,\n});\n\nconst removeBook = (book) => ({\n  type: actionTypes.REMOVE_BOOK,\n  book,\n});\n\nconst changeFilter = (filter) => ({\n  type: actionTypes.CHANGE_FILTER,\n  filter,\n});\n\nconst setBookStatus = (status) => ({\n  type: actionTypes.SET_BOOKS_STATUS,\n  status,\n});\n\nconst getRandomBooks = (categories) => {\n  const MAX_BOOKS_PER_CATEGORY = 3;\n\n  function sample(array, size) {\n    for (let i = array.length - 1; i > array.length - 1 - size; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array.slice(-size);\n  }\n\n  function hasThumbnail(book) {\n    return Boolean(book.volumeInfo.imageLinks?.smallThumbnail);\n  }\n\n  function generateBook(\n    {\n      id,\n      volumeInfo: {\n        title,\n        imageLinks: { smallThumbnail },\n      },\n    },\n    category\n  ) {\n    return {\n      id,\n      title,\n      thumbnail: smallThumbnail.replace(/^http:/, 'https:'),\n      category,\n    };\n  }\n\n  return (dispatch) => {\n    dispatch(setBookStatus('idle'));\n    Promise.all(categories.map(fetchBooksByCategory)).then(\n      (booksByCategory) => {\n        dispatch({\n          type: actionTypes.LOAD_BOOKS,\n          books: booksByCategory\n            .map(({ items }, index) => {\n              const randomSampleSize = Math.floor(\n                Math.random() * MAX_BOOKS_PER_CATEGORY + 1\n              );\n              const categoryBooks = items\n                .filter(hasThumbnail)\n                .map((book) => generateBook(book, categories[index]));\n              return sample(categoryBooks, randomSampleSize);\n            })\n            .flat(),\n        });\n        dispatch(setBookStatus('resolved'));\n      }\n    );\n  };\n};\n\nexport { createBook, removeBook, changeFilter, getRandomBooks, actionTypes };\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Book from '../components/Book';\nimport bookCategories from '../config';\nimport { getRandomBooks, removeBook } from '../redux/actions';\n\nclass BooksList extends Component {\n  componentDidMount() {\n    const { getRandomBooks } = this.props;\n    getRandomBooks(bookCategories);\n  }\n\n  handleRemoveBook = (book) => {\n    const { removeBook } = this.props;\n    removeBook(book);\n  };\n\n  render() {\n    const {\n      books: { data, status },\n      filter,\n    } = this.props;\n\n    const booksList =\n      data.length > 1 ? (\n        data\n          .filter((book) => filter === book.category || filter === 'All')\n          .reverse()\n          .map((book) => (\n            <Book\n              key={book.id}\n              book={book}\n              handleRemoveBook={this.handleRemoveBook}\n            />\n          ))\n      ) : (\n        <div>No books :(</div>\n      );\n\n    return (\n      <>\n        <div className=\"BookList\">\n          {status === 'pending' || status === 'idle' ? (\n            <div>Loading...</div>\n          ) : (\n            booksList\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nBooksList.propTypes = {\n  books: PropTypes.shape({\n    data: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string,\n        title: PropTypes.string,\n        category: PropTypes.string,\n      })\n    ).isRequired,\n    status: PropTypes.string.isRequired,\n  }).isRequired,\n  filter: PropTypes.string.isRequired,\n  removeBook: PropTypes.func.isRequired,\n  getRandomBooks: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({ books, filter }) => ({\n  books,\n  filter,\n});\n\nconst mapDispatchToProps = {\n  removeBook,\n  getRandomBooks,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BooksList);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport uniqid from 'uniqid';\nimport { connect } from 'react-redux';\nimport { createBook } from '../redux/actions';\nimport bookCategories from '../config';\nimport { searchBooksByTitle, getBookById } from '../api/googleBooksAPI';\n\nclass BooksForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '',\n      category: bookCategories[0],\n      id: '',\n      suggestions: [],\n      suggestionsCache: new Map(),\n    };\n    this.debouncedAutocomplete = this.debounce(this.autocomplete, 250);\n  }\n\n  debounce = (func, delay) => {\n    let timeout = null;\n    return function _(...args) {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        func.apply(this, args);\n      }, delay);\n    };\n  };\n\n  autocomplete = (value) => {\n    searchBooksByTitle(value).then((books) => {\n      const bookSuggestions =\n        books.totalItems > 0\n          ? books.items.map((item) => ({\n              id: item.id,\n              title: item.volumeInfo.title,\n            }))\n          : [];\n      this.setState(({ suggestionsCache }) => {\n        return {\n          suggestions: bookSuggestions,\n          suggestionsCache: suggestionsCache.set(value.trim(), bookSuggestions),\n        };\n      });\n    });\n  };\n\n  handleOnKeyUp = (event) => {\n    const { suggestionsCache } = this.state;\n    const { value } = event.target;\n\n    if (suggestionsCache.has(value.trim())) {\n      this.setState({\n        suggestions: suggestionsCache.get(value.trim()),\n      });\n      return;\n    }\n\n    this.debouncedAutocomplete(value);\n  };\n\n  handleOnChange = (event) => {\n    const { name, value } = event.target;\n    const option = document.querySelector(`option[value=\"${value}\"]`);\n    this.setState({\n      [name]: value,\n      suggestions: [],\n      id: option?.dataset.id || '',\n    });\n  };\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    event.persist();\n\n    const { title, category, id } = this.state;\n    const { createBook } = this.props;\n    if (id !== '') {\n      const book = await getBookById(id);\n      createBook({\n        id: book.id,\n        title: book.volumeInfo.title,\n        thumbnail: book.volumeInfo.imageLinks.smallThumbnail,\n        category,\n      });\n    } else {\n      createBook({\n        id: uniqid(),\n        title,\n        category,\n      });\n    }\n    this.setState({\n      title: '',\n      category,\n    });\n    event.target.reset();\n  };\n\n  renderCategories = () =>\n    bookCategories.map((category) => (\n      <option key={category} value={category}>\n        {category}\n      </option>\n    ));\n\n  render() {\n    const { title, category, suggestions } = this.state;\n    return (\n      <div className=\"form\">\n        <form onSubmit={this.handleSubmit}>\n          <h4>Add new book</h4>\n          <div>\n            <input\n              list=\"titles\"\n              type=\"text\"\n              id=\"title\"\n              placeholder=\"Book title\"\n              value={title}\n              onChange={this.handleOnChange}\n              onKeyUp={this.handleOnKeyUp}\n              aria-label=\"title\"\n              name=\"title\"\n            />\n            <datalist id=\"titles\">\n              {suggestions.map(({ id, title }) => (\n                <option\n                  aria-label=\"title suggestions\"\n                  key={id}\n                  data-id={id}\n                  value={title}\n                />\n              ))}\n            </datalist>\n            <select\n              name=\"category\"\n              aria-label=\"category\"\n              id=\"category\"\n              value={category}\n              onChange={this.handleOnChange}\n            >\n              {this.renderCategories()}\n            </select>\n            <button type=\"submit\" value=\"\">\n              Add book\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nBooksForm.propTypes = {\n  createBook: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = {\n  createBook,\n};\n\nexport default connect(null, mapDispatchToProps)(BooksForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport categories from '../config';\n\nconst Filter = ({ handleFilterChange }) => (\n  <label htmlFor=\"filter\">\n    Category\n    <select\n      id=\"filter\"\n      onChange={(event) => handleFilterChange(event.target.value)}\n    >\n      {['All', ...categories].map((category) => (\n        <option key={category} value={category}>\n          {category}\n        </option>\n      ))}\n    </select>\n  </label>\n);\n\nFilter.propTypes = {\n  handleFilterChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = ({ children }) => (\n  <header>\n    <nav>\n      <h1>Bookstore CMS</h1>\n      {children}\n    </nav>\n  </header>\n);\n\nHeader.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default Header;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport BooksList from './BooksList';\nimport BooksForm from './BooksForm';\nimport CategoryFilter from '../components/CategoryFilter';\nimport Header from '../components/Header';\nimport { changeFilter } from '../redux/actions';\n\nclass App extends React.Component {\n  handleFilterChange = (filter) => {\n    const { changeFilter } = this.props;\n    changeFilter(filter);\n  };\n\n  render() {\n    const { filter } = this.props;\n    return (\n      <div className=\"App\">\n        <Header>\n          <CategoryFilter\n            filter={filter}\n            handleFilterChange={this.handleFilterChange}\n          />\n        </Header>\n        <BooksForm />\n        <BooksList />\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  filter: PropTypes.string.isRequired,\n  changeFilter: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({ books, filter }) => ({\n  books,\n  filter,\n});\n\nconst mapDispatchToProps = {\n  changeFilter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { actionTypes } from '../actions';\n\nconst initialState = {\n  books: [],\n  status: 'pending',\n};\n\nconst books = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.CREATE_BOOK:\n      return { ...state, data: [...state.data, action.book] };\n    case actionTypes.REMOVE_BOOK:\n      return {\n        ...state,\n        data: state.data.filter((currBook) => currBook.id !== action.book.id),\n      };\n    case actionTypes.LOAD_BOOKS:\n      return { ...state, data: action.books };\n    default:\n      return state;\n    case actionTypes.SET_BOOKS_STATUS:\n      return { ...state, status: action.status };\n  }\n};\n\nexport default books;\n","import { actionTypes } from '../actions';\n\nconst filter = (state = 'All', { type, filter }) => {\n  switch (type) {\n    case actionTypes.CHANGE_FILTER:\n      return filter;\n    default:\n      return state;\n  }\n};\n\nexport default filter;\n","import { combineReducers } from 'redux';\nimport books from './books';\nimport filter from './filter';\n\nconst reducers = combineReducers({\n  books,\n  filter,\n});\n\nexport default reducers;\n","import { applyMiddleware, createStore } from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport reducers from './reducers';\n\nconst initialState = {\n  books: {\n    data: [],\n    status: 'pending',\n  },\n  filter: 'All',\n};\n\nconst middleware = applyMiddleware(thunk, logger);\n\nconst store = createStore(reducers, initialState, middleware);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './containers/App';\nimport store from './redux/store';\nimport './index.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}